# ===================================================         uboot 顶层 makefile 包含的所有文件
# ---------------------------- 顶层 makefile 包含的文件
 include scripts/Kbuild.include             build 过程需要的中间命令
ifeq ($(dot-config),1)
-include include/config/auto.conf
-include include/config/auto.conf.cmd
-include include/autoconf.mk
-include include/autoconf.mk.dep
	ifeq ($(autoconf_is_old),)
 include config.mk
 include arch/$(ARCH)/Makefile
	endif
endif
 include scripts/Makefile.extrawarn

# ----------------------------- Makefile.build 包含文件
-include include/config/auto.conf
-include $(prefix)/include/autoconf.mk
include scripts/Makefile.uncmd_spl

include scripts/Kbuild.include
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)
include $(kbuild-file)

include scripts/Makefile.lib

ifneq ($(hostprogs-y)$(hostprogs-m),)
include scripts/Makefile.host
endif

ifneq ($(cmd_files),)
  include $(cmd_files)
endif

# ----------------------------- 重点 makefile 文件
include scripts/Kbuild.include
include scripts/Makefile.build
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)
include $(kbuild-file)

# ===================================================         uboot 目标产生流程


libs-y += fs/                                                 顶层定义所有子目录目标
libs-y := $(patsubst %/, %/built-in.o, $(libs-y))             子目录目标被替换为 built-in.o
															  各个子目录继续定义子目录或者编译


u-boot-init := $(head-y)

u-boot-main := $(libs-y)

u-boot.lds: $(LDSCRIPT) prepare FORCE                         # u-boot.lds 目标
	$(call if_changed_dep,cpp_lds)

$(u-boot-init) $(u-boot-main) u-boot.lds FORCE
u-boot
u-boot-nodtb.bin
u-boot.bin


# ==================================================            uboot 目标编译过程 

%.o: %.c prepare scripts FORCE
	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)     # built-in.o 编译时候引入

	build := -f $(srctree)/scripts/Makefile.build obj

	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
	= make  -f  $(srctree)/scripts/Makefile.build  obj=$(build-dir)  $(target-dir)$(notdir $@)
	                                                                # scripts/Makefile.build 引入 __build 目标， 
																	# __build 目标依赖 $(builtin-target) $(lib-target)
																	# $(builtin-target) = $(obj)/built-in.o
                                                                    # $(lib-target)     = $(obj)/lib.a
kbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)
                                                                    # scripts/Makefile.build 引入各级 Kbuild 文件和 Makefile 文件																	

$(builtin-target): $(obj-y) FORCE
	$(call if_changed,link_o_target)                                # buildin-target 连接出来的

$(lib-target): $(lib-y) FORCE                                       # lib-target 连接出来的
	$(call if_changed,link_l_target)

targets += $(builtin-target)
targets += $(lib-target)                                            # 加入 target 中

targets := $(wildcard $(sort $(targets)))
cmd_files := $(wildcard $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))     # 产生 cmd_files

obj-y = 
lib-y = 

二级子目录各个 makefile 只有 obj-y/m/n 目标和 lib-y/m/n 目标



















